//Bengisu Åžahin || 152120191064 || Data Structures Lab || First Homework||bngsshn@gmail.com
#include<stdio.h>
#include<iomanip>
#include<iostream>
#include<fstream>
#include<string>

#define SIZE 100

using namespace std;

//variables
bool visitORnot[SIZE][SIZE] = { false };
char arr[SIZE][SIZE];
int row, column;
int Xcoordinates[SIZE], Ycoordinates[SIZE];

//Functions
int indexX = 0, indexY = 0, newStartingX=0, newStartingY=0;
bool findNewStartingPoints(bool passed[SIZE][SIZE], char arr[SIZE][SIZE]);
int blob_area(int current_row, int current_col);

int main()
{
	ifstream file;
	string file_Name;
	int  i=0 , j, numOfBlobs = 1, SumofRows=0,SumofColumns = 0;
	char eleman;
	int totalPixels;

	cout << "Enter the filename: ";
	cin >> file_Name;

	
	file.open(file_Name);
	if (!file) {
		cout << "Cannot open the file " << endl;
		return 1;
	}
	else 
	{
	file >> row >> column;

	cout << endl << "   ";
	for (j = 0; j < column; j++)
	{
		
		cout << j % 10 ;
	}
	cout << endl << "  +";
	for (j = 0; j < column; j++)
	{
		cout << "-";
	}
	cout << "+ " << endl;
	while ( i < row)
	{
		for (j = 0; j < column; j++)
		{
			file.get(eleman);
			if (eleman == '\n')
			{
				file.get(eleman);
			}
			arr[i][j] = eleman;
			if (j == 0)
			{
				cout << " " << i << "|" << arr[i][j];
			}
			else if (j == column - 1)
			{
				cout << arr[i][j] << "|" << i;
			}
			else
			{
				cout << arr[i][j];
			}
		}
		i++;
		cout << endl;
	}

	cout << "  +";
	for (j = 0; j < column; j++)
	{
		cout << "-";
	}
	cout << "+ " << endl;
	cout << "   ";
	for (j = 0; j < column; j++)
	{
		
		cout << j % 10;
	}

    cout << endl << endl << endl;
	cout << endl << endl << endl;
	}
	file.close();




	cout << "+------+------------+------------+------------+" << endl;
	cout << "| Blob | NoofPixels |  Com Row   | Com Column |" << endl;
	cout << "+------+------------+------------+------------+" << endl;
	
		
			while (findNewStartingPoints(visitORnot,arr) == true)
			{
				
				indexX = 0, indexY = 0;
				totalPixels = blob_area(newStartingX, newStartingY);
				
				SumofColumns = 0; SumofRows = 0;

				for (i = 0; i < totalPixels; i++)
				{
					SumofRows += Xcoordinates[i];
					SumofColumns += Ycoordinates[i];
				}
				
				cout << "|" << setw(6) << right << numOfBlobs << "|" << setw(12) << right <<totalPixels << "|"
					<< setw(12) << right << fixed << setprecision(2) << (double)SumofRows / (double)totalPixels << "|" << setw(12) << right
					<< fixed << setprecision(2) << (double)SumofColumns / (double)totalPixels << "|" << endl;

				numOfBlobs++;
				
			}
	
			cout << endl << endl;
			system("pause");
			return 0;
}

int blob_area(int current_row, int current_col) {
	
	if (current_row < 0 ||current_col < 0 ) 
	{
		
		return 0;
	}

	if(current_row >= row || current_col >= column) 
	{

		return 0;
	}

	if (arr[current_row][current_col] == ' ')
	{
		return 0;
	}
		
    if(visitORnot[current_row][current_col] == true)
	{
		
		return 0;
	}

	visitORnot[current_row][current_col] = true;

	Xcoordinates[indexX]= current_row;
	Ycoordinates[indexY]= current_col;	

	indexX++;
	indexY++;    

	int area = 1;  
			  
	area = area + blob_area(current_row - 1, current_col);
	area = area + blob_area(current_row + 1, current_col);
	area = area + blob_area(current_row, current_col - 1);
	area = area + blob_area(current_row, current_col + 1);

	return area;
}  

bool findNewStartingPoints(bool passed[SIZE][SIZE], char arr[SIZE][SIZE])
{
	int i , j ;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < column; j++)
		{
			if (passed[i][j] == false && arr[i][j]=='x')
			{
				newStartingX = i;
				newStartingY = j;
				return true;
			}

		}
	}
	return false;
}